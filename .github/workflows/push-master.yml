name: HyperSerialPico CI Build

on: [push]

jobs:

###########################
#### HyperSerialPico ######
###########################

  HyperSerialPico:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install GNU Arm Embedded Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '12.2.Rel1'

    - name: Build packages
      shell: bash
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build . --config Release

    - uses: actions/upload-artifact@v3
      name: Upload artifacts (commit)
      if: (startsWith(github.event.ref, 'refs/tags') != true)
      with:
        path: |
          firmwares/*.uf2

    - uses: actions/upload-artifact@v3
      name: Upload artifacts (release)
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: firmware-release
        path: |
          firmwares/*.uf2

    - name: Build packages for Adafruit Feather RP2040 Scorpio (release-only)
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        cd build
        rm *.*
        rm ../firmwares/*
        echo "Neopixel is using GPIO16(OUTPUT_SPI_DATA_PIN) on output 0." > ../firmwares/Firmwares_for_Adafruit_Feather_RP2040_Scorpio.txt
        echo "SPI is using spi0 interface pins: GPIO19(OUTPUT_SPI_DATA_PIN) and GPIO18(OUTPUT_SPI_CLOCK_PIN) on output 3 and 2 respectively." >> ../firmwares/Firmwares_for_Adafruit_Feather_RP2040_Scorpio.txt
        cmake -DOVERRIDE_DATA_PIN=16 -DOVERRIDE_SPI_DATA_PIN=19 -DOVERRIDE_SPI_CLOCK_PIN=18 -DCMAKE_BUILD_TYPE=Release ..
        cmake --build .
        zip -j ../firmwares/Adafruit_Feather_RP2040_Scorpio.zip ../firmwares/*

    - uses: actions/upload-artifact@v3
      name: Upload artifacts (release)
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: firmware-release
        path: |
          firmwares/*.zip

    - name: Build packages for Pimoroni Plasma Stick 2040 W (release-only)
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        cd build
        rm *.*
        rm ../firmwares/*
        echo "Neopixel is using GPIO15(OUTPUT_SPI_DATA_PIN) on output PIXELS." > ../firmwares/Firmwares_for_Pimoroni_Plasma_Stick_2040_W.txt
        cmake -DOVERRIDE_DATA_PIN=15 -DCMAKE_BUILD_TYPE=Release ..
        cmake --build .
        rm ../firmwares/*_Spi.uf2
        zip -j ../firmwares/Pimoroni_Plasma_Stick_2040_W.zip ../firmwares/*

    - uses: actions/upload-artifact@v3
      name: Upload artifacts (release)
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: firmware-release
        path: |
          firmwares/*.zip

    - name: Build packages for Pimoroni Plasma 2040 (release-only)
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        cd build
        rm *.*
        rm ../firmwares/*
        echo "Neopixel is using GPIO15(OUTPUT_SPI_DATA_PIN) on output DA." > ../firmwares/Firmwares_for_Pimoroni_Plasma_2040.txt
        echo "SPI is using spi1 interface pins: GPIO15(OUTPUT_SPI_DATA_PIN) and GPIO14(OUTPUT_SPI_CLOCK_PIN) on output DA and CL respectively." >> ../firmwares/Firmwares_for_Pimoroni_Plasma_2040.txt
        cmake -DOVERRIDE_DATA_PIN=15 -DOVERRIDE_SPI_INTERFACE=spi1 -DOVERRIDE_SPI_DATA_PIN=15 -DOVERRIDE_SPI_CLOCK_PIN=14 -DCMAKE_BUILD_TYPE=Release ..
        cmake --build .
        zip -j ../firmwares/Pimoroni_Plasma_2040.zip ../firmwares/*

    - uses: actions/upload-artifact@v3
      name: Upload artifacts (release)
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: firmware-release
        path: |
          firmwares/*.zip

################################
###### Publish Releases ########
################################

  publish:
    name: Publish Releases
    if: startsWith(github.event.ref, 'refs/tags')
    needs: [HyperSerialPico]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # generate environment variables
      - name: Generate environment variables from version and tag
        run: |
          echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "preRelease=false" >> $GITHUB_ENV

      # If version contains alpha or beta, mark draft release as pre-release
      - name: Mark release as pre-release
        if: contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta')
        run: echo "preRelease=true" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: firmware-release

      # create draft release and upload artifacts
      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          name: HyperSerialPico ${{ env.VERSION }}
          tag_name: ${{ env.TAG }}
          files: |
            *.uf2
            *.zip
          draft: true
          prerelease: ${{ env.preRelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}